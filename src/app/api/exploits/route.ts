import { NextResponse } from 'next/server';
import { MongoClient } from 'mongodb';

const uri = process.env.MONGODB_URI as string; // MongoDB Atlas URI
if (!uri) {
	throw new Error('MongoDB URI is missing from environment variables.');
}

const client = new MongoClient(uri);
let isConnected = false; // Flag to track connection status

// Reuse the connection if already established
async function connectToDatabase() {
	if (!isConnected) {
		await client.connect();
		isConnected = true;
	}
}

export async function GET() {
	try {
		await connectToDatabase();
		const db = client.db('test'); // Database name
		const exploitsCollection = db.collection('modules_metadata');

		const exploits = await exploitsCollection
			.find({}, { projection: { _id: 1, name: 1 } })
			.toArray();

		return NextResponse.json(exploits);
	} catch (error) {
		console.error('Error fetching exploits:', error);
		return NextResponse.json(
			{ error: 'Failed to fetch exploits' },
			{ status: 500 }
		);
	}
}

export async function POST(req: Request) {
	try {
		const { name, ref_name, description } = await req.json();

		if (!name || !ref_name || !description) {
			return NextResponse.json(
				{ error: 'Missing required fields' },
				{ status: 400 }
			);
		}

		await connectToDatabase();
		const db = client.db('tests'); // Database name
		const exploitsCollection = db.collection('modules_metadata');

		const result = await exploitsCollection.insertOne({
			name,
			ref_name,
			description,
		});

		return NextResponse.json(
			{ message: 'Exploit added', insertedId: result.insertedId },
			{ status: 201 }
		);
	} catch (error) {
		console.error('Error inserting exploit:', error);
		return NextResponse.json(
			{ error: 'Failed to add exploit' },
			{ status: 500 }
		);
	}
}
